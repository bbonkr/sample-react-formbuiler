/* tslint:disable */
/* eslint-disable */
/**
 * Form builder api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddFormCommand
 */
export interface AddFormCommand {
    /**
     * 
     * @type {string}
     * @memberof AddFormCommand
     */
    title?: string | null;
    /**
     * 
     * @type {Array<FormItemModel>}
     * @memberof AddFormCommand
     */
    items?: Array<FormItemModel> | null;
    /**
     * 
     * @type {Array<FormLocaledModel>}
     * @memberof AddFormCommand
     */
    locales?: Array<FormLocaledModel> | null;
}
/**
 * 
 * @export
 * @interface AddResultCommand
 */
export interface AddResultCommand {
    /**
     * 
     * @type {string}
     * @memberof AddResultCommand
     */
    formId?: string;
    /**
     * 
     * @type {string}
     * @memberof AddResultCommand
     */
    content?: string | null;
}
/**
 * 
 * @export
 * @interface DeleteFileCommand
 */
export interface DeleteFileCommand {
    /**
     * 
     * @type {string}
     * @memberof DeleteFileCommand
     */
    uri?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ElementTypes {
    SingleLineText = 'SingleLineText',
    MultiLineText = 'MultiLineText',
    Email = 'Email',
    DateTime = 'DateTime',
    Date = 'Date',
    Time = 'Time',
    NumberInteger = 'NumberInteger',
    NumberFloat = 'NumberFloat',
    Select = 'Select',
    Checkbox = 'Checkbox',
    Radio = 'Radio',
    File = 'File'
}

/**
 * 
 * @export
 * @interface ErrorModel
 */
export interface ErrorModel {
    /**
     * 
     * @type {string}
     * @memberof ErrorModel
     */
    message?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ErrorModel
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ErrorModel
     */
    reference?: string | null;
    /**
     * 
     * @type {Array<ErrorModel>}
     * @memberof ErrorModel
     */
    innerErrors?: Array<ErrorModel> | null;
}
/**
 * 
 * @export
 * @interface ErrorModelApiResponseModel
 */
export interface ErrorModelApiResponseModel {
    /**
     * 
     * @type {number}
     * @memberof ErrorModelApiResponseModel
     */
    statusCode?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorModelApiResponseModel
     */
    message?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ErrorModelApiResponseModel
     */
    instance?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ErrorModelApiResponseModel
     */
    path?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ErrorModelApiResponseModel
     */
    method?: string | null;
    /**
     * 
     * @type {ErrorModel}
     * @memberof ErrorModelApiResponseModel
     */
    data?: ErrorModel;
}
/**
 * 
 * @export
 * @interface FormItemLocaledModel
 */
export interface FormItemLocaledModel {
    /**
     * 
     * @type {string}
     * @memberof FormItemLocaledModel
     */
    formId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemLocaledModel
     */
    languageId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemLocaledModel
     */
    languageCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemLocaledModel
     */
    label?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemLocaledModel
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemLocaledModel
     */
    placeholder?: string | null;
}
/**
 * 
 * @export
 * @interface FormItemModel
 */
export interface FormItemModel {
    /**
     * 
     * @type {string}
     * @memberof FormItemModel
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemModel
     */
    formId?: string | null;
    /**
     * 
     * @type {ElementTypes}
     * @memberof FormItemModel
     */
    elementType?: ElementTypes;
    /**
     * 
     * @type {string}
     * @memberof FormItemModel
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemModel
     */
    label?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemModel
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemModel
     */
    placeholder?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FormItemModel
     */
    isRequired?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FormItemModel
     */
    ordinal?: number;
    /**
     * 
     * @type {Array<FormItemOptionModel>}
     * @memberof FormItemModel
     */
    options?: Array<FormItemOptionModel> | null;
    /**
     * 
     * @type {Array<FormItemLocaledModel>}
     * @memberof FormItemModel
     */
    locales?: Array<FormItemLocaledModel> | null;
}
/**
 * 
 * @export
 * @interface FormItemOptionLocaledModel
 */
export interface FormItemOptionLocaledModel {
    /**
     * 
     * @type {string}
     * @memberof FormItemOptionLocaledModel
     */
    formItemOptionId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemOptionLocaledModel
     */
    languageId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemOptionLocaledModel
     */
    languageCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemOptionLocaledModel
     */
    text?: string | null;
}
/**
 * 
 * @export
 * @interface FormItemOptionModel
 */
export interface FormItemOptionModel {
    /**
     * 
     * @type {string}
     * @memberof FormItemOptionModel
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemOptionModel
     */
    formItemId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemOptionModel
     */
    value?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormItemOptionModel
     */
    text?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FormItemOptionModel
     */
    ordinal?: number;
    /**
     * 
     * @type {Array<FormItemOptionLocaledModel>}
     * @memberof FormItemOptionModel
     */
    locales?: Array<FormItemOptionLocaledModel> | null;
}
/**
 * 
 * @export
 * @interface FormLocaledModel
 */
export interface FormLocaledModel {
    /**
     * 
     * @type {string}
     * @memberof FormLocaledModel
     */
    formId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormLocaledModel
     */
    languageId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormLocaledModel
     */
    languageCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormLocaledModel
     */
    title?: string | null;
}
/**
 * 
 * @export
 * @interface FormModel
 */
export interface FormModel {
    /**
     * 
     * @type {string}
     * @memberof FormModel
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormModel
     */
    title?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FormModel
     */
    resultsCount?: number;
    /**
     * 
     * @type {Array<FormItemModel>}
     * @memberof FormModel
     */
    items?: Array<FormItemModel> | null;
    /**
     * 
     * @type {Array<FormLocaledModel>}
     * @memberof FormModel
     */
    locales?: Array<FormLocaledModel> | null;
}
/**
 * 
 * @export
 * @interface FormModelPagedModel
 */
export interface FormModelPagedModel {
    /**
     * 
     * @type {number}
     * @memberof FormModelPagedModel
     */
    currentPage?: number;
    /**
     * 
     * @type {number}
     * @memberof FormModelPagedModel
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof FormModelPagedModel
     */
    totalItems?: number;
    /**
     * 
     * @type {number}
     * @memberof FormModelPagedModel
     */
    totalPages?: number;
    /**
     * 
     * @type {Array<FormModel>}
     * @memberof FormModelPagedModel
     */
    items?: Array<FormModel> | null;
}
/**
 * 
 * @export
 * @interface GetFileByUriQuery
 */
export interface GetFileByUriQuery {
    /**
     * 
     * @type {string}
     * @memberof GetFileByUriQuery
     */
    uri?: string | null;
}
/**
 * 
 * @export
 * @interface GetTranslatedTextQuery
 */
export interface GetTranslatedTextQuery {
    /**
     * 
     * @type {string}
     * @memberof GetTranslatedTextQuery
     */
    originLanguageCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetTranslatedTextQuery
     */
    translateToLanguageCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetTranslatedTextQuery
     */
    text?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof GetTranslatedTextQuery
     */
    isHtml?: boolean;
}
/**
 * 
 * @export
 * @interface LanguageModel
 */
export interface LanguageModel {
    /**
     * 
     * @type {string}
     * @memberof LanguageModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof LanguageModel
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LanguageModel
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LanguageModel
     */
    ordinal?: number;
}
/**
 * 
 * @export
 * @interface LanguageModelPagedModel
 */
export interface LanguageModelPagedModel {
    /**
     * 
     * @type {number}
     * @memberof LanguageModelPagedModel
     */
    currentPage?: number;
    /**
     * 
     * @type {number}
     * @memberof LanguageModelPagedModel
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof LanguageModelPagedModel
     */
    totalItems?: number;
    /**
     * 
     * @type {number}
     * @memberof LanguageModelPagedModel
     */
    totalPages?: number;
    /**
     * 
     * @type {Array<LanguageModel>}
     * @memberof LanguageModelPagedModel
     */
    items?: Array<LanguageModel> | null;
}
/**
 * 
 * @export
 * @interface ResultModel
 */
export interface ResultModel {
    /**
     * 
     * @type {string}
     * @memberof ResultModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultModel
     */
    formId?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultModel
     */
    content?: string | null;
    /**
     * 
     * @type {FormModel}
     * @memberof ResultModel
     */
    form?: FormModel;
}
/**
 * 
 * @export
 * @interface ResultModelPagedModel
 */
export interface ResultModelPagedModel {
    /**
     * 
     * @type {number}
     * @memberof ResultModelPagedModel
     */
    currentPage?: number;
    /**
     * 
     * @type {number}
     * @memberof ResultModelPagedModel
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof ResultModelPagedModel
     */
    totalItems?: number;
    /**
     * 
     * @type {number}
     * @memberof ResultModelPagedModel
     */
    totalPages?: number;
    /**
     * 
     * @type {Array<ResultModel>}
     * @memberof ResultModelPagedModel
     */
    items?: Array<ResultModel> | null;
}
/**
 * 
 * @export
 * @interface TranslatedModel
 */
export interface TranslatedModel {
    /**
     * 
     * @type {string}
     * @memberof TranslatedModel
     */
    originLanguageCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TranslatedModel
     */
    translatedLanguageCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TranslatedModel
     */
    text?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateFormCommand
 */
export interface UpdateFormCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateFormCommand
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateFormCommand
     */
    title?: string | null;
    /**
     * 
     * @type {Array<FormItemModel>}
     * @memberof UpdateFormCommand
     */
    items?: Array<FormItemModel> | null;
    /**
     * 
     * @type {Array<FormLocaledModel>}
     * @memberof UpdateFormCommand
     */
    locales?: Array<FormLocaledModel> | null;
}
/**
 * 
 * @export
 * @interface UploadFileMediaModel
 */
export interface UploadFileMediaModel {
    /**
     * 
     * @type {string}
     * @memberof UploadFileMediaModel
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UploadFileMediaModel
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof UploadFileMediaModel
     */
    contentType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UploadFileMediaModel
     */
    content?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UploadFileMediaModel
     */
    uri?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UploadFileMediaModel
     */
    uriForDeletion?: string | null;
}
/**
 * 
 * @export
 * @interface WeatherForecast
 */
export interface WeatherForecast {
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    date?: string;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    temperatureC?: number;
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    summary?: string | null;
}

/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeleteFileCommand} [deleteFileCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesDelete: async (deleteFileCommand?: DeleteFileCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Files/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteFileCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetFileByUriQuery} [getFileByUriQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesDownload: async (getFileByUriQuery?: GetFileByUriQuery, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Files/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getFileByUriQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<any>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesUpload: async (files?: Array<any>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeleteFileCommand} [deleteFileCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FilesDelete(deleteFileCommand?: DeleteFileCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FilesDelete(deleteFileCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetFileByUriQuery} [getFileByUriQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FilesDownload(getFileByUriQuery?: GetFileByUriQuery, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FilesDownload(getFileByUriQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<any>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FilesUpload(files?: Array<any>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadFileMediaModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FilesUpload(files, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * 
         * @param {DeleteFileCommand} [deleteFileCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesDelete(deleteFileCommand?: DeleteFileCommand, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiv10FilesDelete(deleteFileCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetFileByUriQuery} [getFileByUriQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesDownload(getFileByUriQuery?: GetFileByUriQuery, options?: any): AxiosPromise<any> {
            return localVarFp.apiv10FilesDownload(getFileByUriQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<any>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesUpload(files?: Array<any>, options?: any): AxiosPromise<Array<UploadFileMediaModel>> {
            return localVarFp.apiv10FilesUpload(files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiv10FilesDelete operation in FilesApi.
 * @export
 * @interface FilesApiApiv10FilesDeleteRequest
 */
export interface FilesApiApiv10FilesDeleteRequest {
    /**
     * 
     * @type {DeleteFileCommand}
     * @memberof FilesApiApiv10FilesDelete
     */
    readonly deleteFileCommand?: DeleteFileCommand
}

/**
 * Request parameters for apiv10FilesDownload operation in FilesApi.
 * @export
 * @interface FilesApiApiv10FilesDownloadRequest
 */
export interface FilesApiApiv10FilesDownloadRequest {
    /**
     * 
     * @type {GetFileByUriQuery}
     * @memberof FilesApiApiv10FilesDownload
     */
    readonly getFileByUriQuery?: GetFileByUriQuery
}

/**
 * Request parameters for apiv10FilesUpload operation in FilesApi.
 * @export
 * @interface FilesApiApiv10FilesUploadRequest
 */
export interface FilesApiApiv10FilesUploadRequest {
    /**
     * 
     * @type {Array<any>}
     * @memberof FilesApiApiv10FilesUpload
     */
    readonly files?: Array<any>
}

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * 
     * @param {FilesApiApiv10FilesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public apiv10FilesDelete(requestParameters: FilesApiApiv10FilesDeleteRequest = {}, options?: any) {
        return FilesApiFp(this.configuration).apiv10FilesDelete(requestParameters.deleteFileCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FilesApiApiv10FilesDownloadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public apiv10FilesDownload(requestParameters: FilesApiApiv10FilesDownloadRequest = {}, options?: any) {
        return FilesApiFp(this.configuration).apiv10FilesDownload(requestParameters.getFileByUriQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FilesApiApiv10FilesUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public apiv10FilesUpload(requestParameters: FilesApiApiv10FilesUploadRequest = {}, options?: any) {
        return FilesApiFp(this.configuration).apiv10FilesUpload(requestParameters.files, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FormsApi - axios parameter creator
 * @export
 */
export const FormsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddFormCommand} [addFormCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FormsAddForm: async (addFormCommand?: AddFormCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addFormCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FormsDeleteForm: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiv10FormsDeleteForm', 'id', id)
            const localVarPath = `/api/v1/Forms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FormsGetFormById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiv10FormsGetFormById', 'id', id)
            const localVarPath = `/api/v1/Forms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FormsGetForms: async (page?: number, limit?: number, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateFormCommand} [updateFormCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FormsUpdateForm: async (updateFormCommand?: UpdateFormCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFormCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormsApi - functional programming interface
 * @export
 */
export const FormsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FormsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddFormCommand} [addFormCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FormsAddForm(addFormCommand?: AddFormCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FormsAddForm(addFormCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FormsDeleteForm(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FormsDeleteForm(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FormsGetFormById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FormsGetFormById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FormsGetForms(page?: number, limit?: number, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormModelPagedModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FormsGetForms(page, limit, keyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateFormCommand} [updateFormCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FormsUpdateForm(updateFormCommand?: UpdateFormCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FormsUpdateForm(updateFormCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FormsApi - factory interface
 * @export
 */
export const FormsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FormsApiFp(configuration)
    return {
        /**
         * 
         * @param {AddFormCommand} [addFormCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FormsAddForm(addFormCommand?: AddFormCommand, options?: any): AxiosPromise<FormModel> {
            return localVarFp.apiv10FormsAddForm(addFormCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FormsDeleteForm(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiv10FormsDeleteForm(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FormsGetFormById(id: string, options?: any): AxiosPromise<FormModel> {
            return localVarFp.apiv10FormsGetFormById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FormsGetForms(page?: number, limit?: number, keyword?: string, options?: any): AxiosPromise<FormModelPagedModel> {
            return localVarFp.apiv10FormsGetForms(page, limit, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateFormCommand} [updateFormCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FormsUpdateForm(updateFormCommand?: UpdateFormCommand, options?: any): AxiosPromise<FormModel> {
            return localVarFp.apiv10FormsUpdateForm(updateFormCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiv10FormsAddForm operation in FormsApi.
 * @export
 * @interface FormsApiApiv10FormsAddFormRequest
 */
export interface FormsApiApiv10FormsAddFormRequest {
    /**
     * 
     * @type {AddFormCommand}
     * @memberof FormsApiApiv10FormsAddForm
     */
    readonly addFormCommand?: AddFormCommand
}

/**
 * Request parameters for apiv10FormsDeleteForm operation in FormsApi.
 * @export
 * @interface FormsApiApiv10FormsDeleteFormRequest
 */
export interface FormsApiApiv10FormsDeleteFormRequest {
    /**
     * 
     * @type {string}
     * @memberof FormsApiApiv10FormsDeleteForm
     */
    readonly id: string
}

/**
 * Request parameters for apiv10FormsGetFormById operation in FormsApi.
 * @export
 * @interface FormsApiApiv10FormsGetFormByIdRequest
 */
export interface FormsApiApiv10FormsGetFormByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof FormsApiApiv10FormsGetFormById
     */
    readonly id: string
}

/**
 * Request parameters for apiv10FormsGetForms operation in FormsApi.
 * @export
 * @interface FormsApiApiv10FormsGetFormsRequest
 */
export interface FormsApiApiv10FormsGetFormsRequest {
    /**
     * 
     * @type {number}
     * @memberof FormsApiApiv10FormsGetForms
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FormsApiApiv10FormsGetForms
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof FormsApiApiv10FormsGetForms
     */
    readonly keyword?: string
}

/**
 * Request parameters for apiv10FormsUpdateForm operation in FormsApi.
 * @export
 * @interface FormsApiApiv10FormsUpdateFormRequest
 */
export interface FormsApiApiv10FormsUpdateFormRequest {
    /**
     * 
     * @type {UpdateFormCommand}
     * @memberof FormsApiApiv10FormsUpdateForm
     */
    readonly updateFormCommand?: UpdateFormCommand
}

/**
 * FormsApi - object-oriented interface
 * @export
 * @class FormsApi
 * @extends {BaseAPI}
 */
export class FormsApi extends BaseAPI {
    /**
     * 
     * @param {FormsApiApiv10FormsAddFormRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    public apiv10FormsAddForm(requestParameters: FormsApiApiv10FormsAddFormRequest = {}, options?: any) {
        return FormsApiFp(this.configuration).apiv10FormsAddForm(requestParameters.addFormCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormsApiApiv10FormsDeleteFormRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    public apiv10FormsDeleteForm(requestParameters: FormsApiApiv10FormsDeleteFormRequest, options?: any) {
        return FormsApiFp(this.configuration).apiv10FormsDeleteForm(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormsApiApiv10FormsGetFormByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    public apiv10FormsGetFormById(requestParameters: FormsApiApiv10FormsGetFormByIdRequest, options?: any) {
        return FormsApiFp(this.configuration).apiv10FormsGetFormById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormsApiApiv10FormsGetFormsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    public apiv10FormsGetForms(requestParameters: FormsApiApiv10FormsGetFormsRequest = {}, options?: any) {
        return FormsApiFp(this.configuration).apiv10FormsGetForms(requestParameters.page, requestParameters.limit, requestParameters.keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormsApiApiv10FormsUpdateFormRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    public apiv10FormsUpdateForm(requestParameters: FormsApiApiv10FormsUpdateFormRequest = {}, options?: any) {
        return FormsApiFp(this.configuration).apiv10FormsUpdateForm(requestParameters.updateFormCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LanguagesApi - axios parameter creator
 * @export
 */
export const LanguagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10LanguagesGetLanguages: async (page?: number, limit?: number, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LanguagesApi - functional programming interface
 * @export
 */
export const LanguagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LanguagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10LanguagesGetLanguages(page?: number, limit?: number, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageModelPagedModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10LanguagesGetLanguages(page, limit, keyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LanguagesApi - factory interface
 * @export
 */
export const LanguagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LanguagesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10LanguagesGetLanguages(page?: number, limit?: number, keyword?: string, options?: any): AxiosPromise<LanguageModelPagedModel> {
            return localVarFp.apiv10LanguagesGetLanguages(page, limit, keyword, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiv10LanguagesGetLanguages operation in LanguagesApi.
 * @export
 * @interface LanguagesApiApiv10LanguagesGetLanguagesRequest
 */
export interface LanguagesApiApiv10LanguagesGetLanguagesRequest {
    /**
     * 
     * @type {number}
     * @memberof LanguagesApiApiv10LanguagesGetLanguages
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof LanguagesApiApiv10LanguagesGetLanguages
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof LanguagesApiApiv10LanguagesGetLanguages
     */
    readonly keyword?: string
}

/**
 * LanguagesApi - object-oriented interface
 * @export
 * @class LanguagesApi
 * @extends {BaseAPI}
 */
export class LanguagesApi extends BaseAPI {
    /**
     * 
     * @param {LanguagesApiApiv10LanguagesGetLanguagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public apiv10LanguagesGetLanguages(requestParameters: LanguagesApiApiv10LanguagesGetLanguagesRequest = {}, options?: any) {
        return LanguagesApiFp(this.configuration).apiv10LanguagesGetLanguages(requestParameters.page, requestParameters.limit, requestParameters.keyword, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ResultsApi - axios parameter creator
 * @export
 */
export const ResultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddResultCommand} [addResultCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10ResultsAddResult: async (addResultCommand?: AddResultCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Results`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addResultCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10ResultsGetResultById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiv10ResultsGetResultById', 'id', id)
            const localVarPath = `/api/v1/Results/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10ResultsGetResults: async (page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Results`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResultsApi - functional programming interface
 * @export
 */
export const ResultsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResultsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddResultCommand} [addResultCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10ResultsAddResult(addResultCommand?: AddResultCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10ResultsAddResult(addResultCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10ResultsGetResultById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10ResultsGetResultById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10ResultsGetResults(page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultModelPagedModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10ResultsGetResults(page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResultsApi - factory interface
 * @export
 */
export const ResultsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResultsApiFp(configuration)
    return {
        /**
         * 
         * @param {AddResultCommand} [addResultCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10ResultsAddResult(addResultCommand?: AddResultCommand, options?: any): AxiosPromise<ResultModel> {
            return localVarFp.apiv10ResultsAddResult(addResultCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10ResultsGetResultById(id: string, options?: any): AxiosPromise<ResultModel> {
            return localVarFp.apiv10ResultsGetResultById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10ResultsGetResults(page?: number, limit?: number, options?: any): AxiosPromise<ResultModelPagedModel> {
            return localVarFp.apiv10ResultsGetResults(page, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiv10ResultsAddResult operation in ResultsApi.
 * @export
 * @interface ResultsApiApiv10ResultsAddResultRequest
 */
export interface ResultsApiApiv10ResultsAddResultRequest {
    /**
     * 
     * @type {AddResultCommand}
     * @memberof ResultsApiApiv10ResultsAddResult
     */
    readonly addResultCommand?: AddResultCommand
}

/**
 * Request parameters for apiv10ResultsGetResultById operation in ResultsApi.
 * @export
 * @interface ResultsApiApiv10ResultsGetResultByIdRequest
 */
export interface ResultsApiApiv10ResultsGetResultByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof ResultsApiApiv10ResultsGetResultById
     */
    readonly id: string
}

/**
 * Request parameters for apiv10ResultsGetResults operation in ResultsApi.
 * @export
 * @interface ResultsApiApiv10ResultsGetResultsRequest
 */
export interface ResultsApiApiv10ResultsGetResultsRequest {
    /**
     * 
     * @type {number}
     * @memberof ResultsApiApiv10ResultsGetResults
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ResultsApiApiv10ResultsGetResults
     */
    readonly limit?: number
}

/**
 * ResultsApi - object-oriented interface
 * @export
 * @class ResultsApi
 * @extends {BaseAPI}
 */
export class ResultsApi extends BaseAPI {
    /**
     * 
     * @param {ResultsApiApiv10ResultsAddResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    public apiv10ResultsAddResult(requestParameters: ResultsApiApiv10ResultsAddResultRequest = {}, options?: any) {
        return ResultsApiFp(this.configuration).apiv10ResultsAddResult(requestParameters.addResultCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResultsApiApiv10ResultsGetResultByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    public apiv10ResultsGetResultById(requestParameters: ResultsApiApiv10ResultsGetResultByIdRequest, options?: any) {
        return ResultsApiFp(this.configuration).apiv10ResultsGetResultById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResultsApiApiv10ResultsGetResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    public apiv10ResultsGetResults(requestParameters: ResultsApiApiv10ResultsGetResultsRequest = {}, options?: any) {
        return ResultsApiFp(this.configuration).apiv10ResultsGetResults(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TranslationsApi - axios parameter creator
 * @export
 */
export const TranslationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GetTranslatedTextQuery} [getTranslatedTextQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10TranslationsTranslate: async (getTranslatedTextQuery?: GetTranslatedTextQuery, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Translations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getTranslatedTextQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TranslationsApi - functional programming interface
 * @export
 */
export const TranslationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TranslationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GetTranslatedTextQuery} [getTranslatedTextQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10TranslationsTranslate(getTranslatedTextQuery?: GetTranslatedTextQuery, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TranslatedModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10TranslationsTranslate(getTranslatedTextQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TranslationsApi - factory interface
 * @export
 */
export const TranslationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TranslationsApiFp(configuration)
    return {
        /**
         * 
         * @param {GetTranslatedTextQuery} [getTranslatedTextQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10TranslationsTranslate(getTranslatedTextQuery?: GetTranslatedTextQuery, options?: any): AxiosPromise<TranslatedModel> {
            return localVarFp.apiv10TranslationsTranslate(getTranslatedTextQuery, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiv10TranslationsTranslate operation in TranslationsApi.
 * @export
 * @interface TranslationsApiApiv10TranslationsTranslateRequest
 */
export interface TranslationsApiApiv10TranslationsTranslateRequest {
    /**
     * 
     * @type {GetTranslatedTextQuery}
     * @memberof TranslationsApiApiv10TranslationsTranslate
     */
    readonly getTranslatedTextQuery?: GetTranslatedTextQuery
}

/**
 * TranslationsApi - object-oriented interface
 * @export
 * @class TranslationsApi
 * @extends {BaseAPI}
 */
export class TranslationsApi extends BaseAPI {
    /**
     * 
     * @param {TranslationsApiApiv10TranslationsTranslateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    public apiv10TranslationsTranslate(requestParameters: TranslationsApiApiv10TranslationsTranslateRequest = {}, options?: any) {
        return TranslationsApiFp(this.configuration).apiv10TranslationsTranslate(requestParameters.getTranslatedTextQuery, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WeatherForecastApi - axios parameter creator
 * @export
 */
export const WeatherForecastApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10WeatherForecastGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/WeatherForecast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeatherForecastApi - functional programming interface
 * @export
 */
export const WeatherForecastApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WeatherForecastApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10WeatherForecastGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WeatherForecast>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10WeatherForecastGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WeatherForecastApi - factory interface
 * @export
 */
export const WeatherForecastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WeatherForecastApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10WeatherForecastGet(options?: any): AxiosPromise<Array<WeatherForecast>> {
            return localVarFp.apiv10WeatherForecastGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WeatherForecastApi - object-oriented interface
 * @export
 * @class WeatherForecastApi
 * @extends {BaseAPI}
 */
export class WeatherForecastApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherForecastApi
     */
    public apiv10WeatherForecastGet(options?: any) {
        return WeatherForecastApiFp(this.configuration).apiv10WeatherForecastGet(options).then((request) => request(this.axios, this.basePath));
    }
}


